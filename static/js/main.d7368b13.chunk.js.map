{"version":3,"sources":["components/switchCurrencies.tsx","store/accountBalances/accountBalancesSelectors.ts","store/currencies/currenciesSelectors.ts","store/exchange/exchangeSelectors.ts","store/rates/ratesSelectors.ts","components/exchangeRate.tsx","store/rates/ratesActions.ts","ratesSubscription.ts","store/accountBalances/accountBalancesActions.ts","store/exchange/exchangeActions.ts","formatAmount.ts","components/balance.tsx","components/amountInput.tsx","components/currencySelector.tsx","components/exchangePanel.tsx","components/baseExchangePanel.tsx","components/contraExchangePanel.tsx","components/exchangeButton.tsx","components/exchangeForm.tsx","components/exchangeConfirmation.tsx","components/exchange.tsx","store/exchange/exchangeReducer.ts","store/rates/ratesReducer.ts","store/accountBalances/accountBalancesReducer.ts","store/currencies/currenciesReducer.ts","store/rootReducer.ts","store/configureStore.ts","App.tsx","index.tsx"],"names":["SwitchButton","styled","div","SwitchCurrencies","props","data-testid","onClick","className","getBalance","state","currency","accountBalances","EMPTY_OBJECT","getSymbol","currencyName","currencies","getCurrencyData","symbol","getCurrenices","Object","keys","getContraCurrency","currencyPair","exchange","substring","getBaseCurrency","getCurrencyPair","getBaseAmount","baseAmount","getContraAmount","contraAmount","isBaseFixed","isBaseAmountValid","amount","baseCurrency","accountBalancesSelectors","isExchangeEnabled","getBaseCurrencySymbol","currenciesSelectors","getContraCurrencySymbol","shouldShowConfirmation","Boolean","getConfirmationBaseAmount","confirmationBaseAmount","getConfirmationContraAmount","confirmationContraAmount","getRate","rates","exchangeSelectors","ratesSelectors","Container","Content","ExchangeRate","RatesActionTypes","rate","useSelector","contraSymbol","baseSymbol","APP_ID","process","requestRatesForPair","base","contra","requestRates","a","async","contraCurrencies","symbols","join","url","fetch","response","json","data","reduce","result","contraCurrency","pairIdMap","AccountBalanceActionTypes","setRates","type","SET_RATES","ExchangeActionTypes","setAccountBalanceForCurrency","balance","changeCurrencyPair","newCurrencyPair","dispatch","getState","oldCurrencyPair","selectors","clearInterval","callback","then","intervalId","setInterval","subscribe","exchangeActions","ratesActions","SET_CURRENCY_PAIR","setCurrencyPair","recalculateNonFixedAmount","exchangeRate","newAmount","Number","math","setContraAmount","setBaseAmount","onBaseAmountChange","newBaseAmount","setBaseFixed","onContraAmountChange","newContraAmount","setContraFixed","SET_BASE_AMOUNT","SET_CONTRA_AMOUNT","SET_BASE_FIXED","SET_CONTRA_FIXED","onExchangeButtonPress","newBaseAccountBalance","newContraAccountBalance","SHOW_CONFIRMATION","showConfirmation","accountBalancesActions","formatAmount","toLocaleString","minimumFractionDigits","BalanceContainer","span","shouldHighlight","Balance","defaultMaskOptions","prefix","suffix","includeThousandsSeparator","thousandsSeparatorSymbol","allowDecimal","decimalSymbol","decimalLimit","integerLimit","allowNegative","allowLeadingZeroes","StyledAmountInput","currencyMask","maskOptions","decimalsRegex","numberMask","createNumberMask","requireDecimal","rawValue","mask","exec","length","push","createAmountInputMask","onChange","e","newValue","target","value","replace","isNaN","render","ref","renderProps","Input","innerRef","StyledDropdownToggle","DropdownToggle","CurrencySelector","options","React","dropdownOpen","setDropdownOpen","Dropdown","isOpen","toggle","prevState","caret","color","DropdownMenu","DropdownItem","header","map","option","index","key","PanelContainer","ExchangePanel","selectedCurrency","shouldHighlightBalance","onAmountChange","onAmountFocus","onCurrencySelected","onBalanceClick","Row","Col","InputGroup","InputGroupAddon","addonType","onFocus","BaseExchangePanel","accountBalanceSelectors","useDispatch","panelProps","newBaseCurrency","newContraCurrency","ContraExchangePanel","ExchangeButton","disabled","Button","block","SwitchAndRateContainer","ExchangeForm","reverseCurrencyPair","ConfirmationContent","ConfirmationText","ConfirmationIcon","style","fontSize","HIDE_CONFIRMATION","PaddedContainer","Exchange","fluid","initialState","exchangeReducer","action","ratesReducer","accountBalancesReducer","SET_ACCOUNT_BALANCE","currenciesReducer","rootReducer","combineReducers","configureStore","preloadedState","middlewares","thunk","store","createStore","compose","applyMiddleware","window","devToolsExtension","USD","GBP","EUR","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.d7368b13.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport interface SwitchCurrenciesProps {\r\n  onClick: () => void;\r\n}\r\n\r\nconst SwitchButton = styled.div`\r\n  border: #ccc solid 1px;\r\n  border-radius: 50%;\r\n  cursor: pointer;\r\n`;\r\n\r\nfunction SwitchCurrencies(props: SwitchCurrenciesProps) {\r\n  return (\r\n    <SwitchButton data-testid=\"switch-currencies\" onClick={props.onClick}>\r\n      <i className=\"material-icons\">swap_vert</i>\r\n    </SwitchButton>\r\n  );\r\n}\r\n\r\nexport default SwitchCurrencies;\r\n","import StoreState from '../storeState';\r\n\r\nexport const getBalance = (state: StoreState, currency: string): number => {\r\n  return state.accountBalances[currency] || 0;\r\n};\r\n","import StoreState from '../storeState';\r\n\r\nconst EMPTY_OBJECT = {};\r\n\r\nconst getCurrencyData = (state: StoreState, currencyName: string) =>\r\n  state.currencies[currencyName] || EMPTY_OBJECT;\r\n\r\nexport const getSymbol = (state: StoreState, currencyName: string): string => {\r\n  return getCurrencyData(state, currencyName).symbol || '?';\r\n};\r\n\r\nexport const getCurrenices = (state: StoreState) => {\r\n  return Object.keys(state.currencies);\r\n};\r\n","import StoreState from '../storeState';\r\nimport * as accountBalancesSelectors from '../accountBalances/accountBalancesSelectors';\r\nimport * as currenciesSelectors from '../currencies/currenciesSelectors';\r\n\r\nexport const getContraCurrency = (state: StoreState): string => {\r\n  const { currencyPair } = state.exchange;\r\n  return currencyPair ? currencyPair.substring(3) : '';\r\n};\r\n\r\nexport const getBaseCurrency = (state: StoreState): string => {\r\n  const { currencyPair } = state.exchange;\r\n  return currencyPair ? currencyPair.substring(0, 3) : '';\r\n};\r\n\r\nexport const getCurrencyPair = (state: StoreState) => {\r\n  return state.exchange.currencyPair || '';\r\n};\r\n\r\nexport const getBaseAmount = (state: StoreState): number => {\r\n  return state.exchange.baseAmount;\r\n};\r\n\r\nexport const getContraAmount = (state: StoreState): number => {\r\n  return state.exchange.contraAmount;\r\n};\r\n\r\nexport const isBaseFixed = (state: StoreState): boolean => {\r\n  return state.exchange.isBaseFixed;\r\n};\r\n\r\nexport const isBaseAmountValid = (state: StoreState): boolean => {\r\n  const amount = getBaseAmount(state);\r\n  const baseCurrency = getBaseCurrency(state);\r\n  const balance = accountBalancesSelectors.getBalance(state, baseCurrency);\r\n  return balance >= amount;\r\n};\r\n\r\nexport const isExchangeEnabled = (state: StoreState): boolean => {\r\n  return isBaseAmountValid(state) && getBaseAmount(state) !== 0;\r\n};\r\n\r\nexport const getBaseCurrencySymbol = (state: StoreState): string => {\r\n  const baseCurrency = getBaseCurrency(state);\r\n  return currenciesSelectors.getSymbol(state, baseCurrency);\r\n};\r\n\r\nexport const getContraCurrencySymbol = (state: StoreState): string => {\r\n  const currency = getContraCurrency(state);\r\n  return currenciesSelectors.getSymbol(state, currency);\r\n};\r\n\r\nexport const shouldShowConfirmation = (state: StoreState): boolean => {\r\n  return Boolean(state.exchange.shouldShowConfirmation);\r\n};\r\n\r\nexport const getConfirmationBaseAmount = (state: StoreState): number => {\r\n  return state.exchange.confirmationBaseAmount || 0;\r\n};\r\n\r\nexport const getConfirmationContraAmount = (state: StoreState): number => {\r\n  return state.exchange.confirmationContraAmount || 0;\r\n};\r\n","import StoreState from '../storeState';\r\n\r\nexport const getRate = (state: StoreState, currencyPair: string): number => {\r\n  return state.rates[currencyPair] || 0;\r\n};\r\n","import * as React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport StoreState from '../store/storeState';\r\nimport * as exchangeSelectors from '../store/exchange/exchangeSelectors';\r\nimport * as ratesSelectors from '../store/rates/ratesSelectors';\r\nimport styled from 'styled-components';\r\n\r\nconst getRate = (state: StoreState) => {\r\n  const currencyPair = exchangeSelectors.getCurrencyPair(state);\r\n  return ratesSelectors.getRate(state, currencyPair);\r\n};\r\n\r\nconst Container = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  top: 2px;\r\n  display: flex;\r\n  justify-content: center;\r\n  pointer-events: none;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n  width: 140px;\r\n`;\r\n\r\nfunction ExchangeRate() {\r\n  const rate = useSelector(getRate);\r\n  const contraSymbol = useSelector(exchangeSelectors.getContraCurrencySymbol);\r\n  const baseSymbol = useSelector(exchangeSelectors.getBaseCurrencySymbol);\r\n\r\n  return (\r\n    <Container>\r\n      <Content>\r\n        <i className=\"material-icons\">trending_up</i>\r\n        <span data-testid=\"exchange-rate\">{`${baseSymbol}1 = ${contraSymbol}${rate}`}</span>\r\n      </Content>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default ExchangeRate;\r\n","import * as exchangeActions from '../exchange/exchangeActions';\r\n\r\nexport enum RatesActionTypes {\r\n  SET_RATES = 'SET_RATES'\r\n}\r\n\r\nexport interface UpdateRatesAction {\r\n  type: RatesActionTypes.SET_RATES;\r\n  rates: { string: number };\r\n}\r\n\r\nexport type RatesAction = UpdateRatesAction;\r\n\r\nexport const updateRates = (rates: { [rate: string]: number }) => (\r\n  dispatch: any\r\n) => {\r\n  dispatch(setRates(rates));\r\n  dispatch(exchangeActions.recalculateNonFixedAmount());\r\n};\r\n\r\nconst setRates = (rates: { [rate: string]: number }) => ({\r\n  type: RatesActionTypes.SET_RATES,\r\n  rates\r\n});\r\n","const APP_ID = process.env.REACT_APP_ORA_APP_ID;\r\n\r\nconst tenSeconds = 10000;\r\n\r\nconst requestRatesForPair = (currencyPair: string) => {\r\n  const base = currencyPair.substring(0, 3);\r\n  const contra = currencyPair.substring(3);\r\n  return requestRates(base, [contra]);\r\n};\r\n\r\nconst requestRates = async (\r\n  base: string,\r\n  contraCurrencies: string[] = []\r\n): Promise<{ [pair: string]: number }> => {\r\n  const symbols = contraCurrencies.join(',');\r\n\r\n  let url = `https://openexchangerates.org/api/latest.json?app_id=${APP_ID}&base=${base}`;\r\n  if (symbols !== '') {\r\n    url = `${url}&symbols=${symbols}`;\r\n  }\r\n\r\n  const response = await fetch(url);\r\n  const data = await response.json();\r\n  return Object.keys(data.rates).reduce((result, contraCurrency) => {\r\n    const currencyPair = `${data.base}${contraCurrency}`;\r\n\r\n    return {\r\n      ...result,\r\n      [currencyPair]: data.rates[contraCurrency]\r\n    };\r\n  }, {});\r\n};\r\n\r\nconst pairIdMap: any = {};\r\n\r\nexport const subscribe = (\r\n  currencyPair: string,\r\n  callback: (rates: { [rate: string]: number }) => void\r\n) => {\r\n  requestRatesForPair(currencyPair).then(callback);\r\n  const intervalId = setInterval(() => {\r\n    requestRatesForPair(currencyPair).then(callback);\r\n  }, tenSeconds);\r\n\r\n  pairIdMap[currencyPair] = intervalId;\r\n};\r\n\r\nexport const unsubscribe = (currencyPair: string) => {\r\n  pairIdMap[currencyPair] && clearInterval(pairIdMap[currencyPair]);\r\n};\r\n","export enum AccountBalanceActionTypes {\r\n  SET_ACCOUNT_BALANCE = 'SET_ACCOUNT_BALANCE'\r\n}\r\n\r\nexport const setAccountBalanceForCurrency = (\r\n  currency: string,\r\n  balance: number\r\n) => ({\r\n  type: 'SET_ACCOUNT_BALANCE',\r\n  currency,\r\n  balance\r\n});\r\n","import { subscribe, unsubscribe } from '../../ratesSubscription';\r\nimport * as ratesActions from '../rates/ratesActions';\r\nimport StoreState from '../storeState';\r\nimport { Dispatch } from 'redux';\r\nimport * as selectors from './exchangeSelectors';\r\nimport * as ratesSelectors from '../rates/ratesSelectors';\r\nimport * as accountBalancesSelectors from '../accountBalances/accountBalancesSelectors';\r\nimport * as accountBalancesActions from '../accountBalances/accountBalancesActions';\r\nimport * as math from 'mathjs';\r\n\r\nexport enum ExchangeActionTypes {\r\n  SET_CURRENCY_PAIR = 'SET_CURRENCY_PAIR',\r\n  SET_BASE_AMOUNT = 'SET_BASE_AMOUNT',\r\n  SET_CONTRA_AMOUNT = 'SET_CONTRA_AMOUNT',\r\n  SET_BASE_FIXED = 'SET_BASE_FIXED',\r\n  SET_CONTRA_FIXED = 'SET_CONTRA_FIXED',\r\n  SHOW_CONFIRMATION = 'SHOW_CONFIRMATION',\r\n  HIDE_CONFIRMATION = 'HIDE_CONFIRMATION'\r\n}\r\n\r\nconst setCurrencyPair = (currencyPair: string) => ({\r\n  type: ExchangeActionTypes.SET_CURRENCY_PAIR,\r\n  currencyPair\r\n});\r\n\r\nexport const onBaseCurrencyChange = (newBaseCurrency: string) => (\r\n  dispatch: any,\r\n  getState: any\r\n) => {\r\n  const state = getState();\r\n  const contraCurrency = selectors.getContraCurrency(state);\r\n\r\n  dispatch(setBaseFixed());\r\n\r\n  let newContraCurrency = contraCurrency;\r\n  if (contraCurrency === newBaseCurrency) {\r\n    newContraCurrency = selectors.getBaseCurrency(state);\r\n  }\r\n\r\n  dispatch(changeCurrencyPair(`${newBaseCurrency}${newContraCurrency}`));\r\n  dispatch(recalculateNonFixedAmount());\r\n};\r\n\r\nexport const onContraCurrencyChange = (newContraCurrency: string) => (\r\n  dispatch: any,\r\n  getState: any\r\n) => {\r\n  const state = getState();\r\n  const baseCurrency = selectors.getBaseCurrency(state);\r\n\r\n  dispatch(setContraFixed());\r\n\r\n  let newBaseCurrency = baseCurrency;\r\n  if (baseCurrency === newContraCurrency) {\r\n    newBaseCurrency = selectors.getContraCurrency(state);\r\n  }\r\n\r\n  dispatch(changeCurrencyPair(`${newBaseCurrency}${newContraCurrency}`));\r\n  dispatch(recalculateNonFixedAmount());\r\n};\r\n\r\nexport const changeCurrencyPair = (newCurrencyPair: string) => (\r\n  dispatch: any,\r\n  getState: any\r\n) => {\r\n  const state: StoreState = getState();\r\n  const oldCurrencyPair = selectors.getCurrencyPair(state);\r\n\r\n  unsubscribe(oldCurrencyPair);\r\n  subscribe(newCurrencyPair, rates =>\r\n    dispatch(ratesActions.updateRates(rates))\r\n  );\r\n  dispatch(setCurrencyPair(newCurrencyPair));\r\n};\r\n\r\nexport const recalculateNonFixedAmount = () => (\r\n  dispatch: Dispatch,\r\n  getState: any\r\n) => {\r\n  const state: StoreState = getState();\r\n  const isBaseFixed = selectors.isBaseFixed(state);\r\n\r\n  if (isBaseFixed) {\r\n    const baseAmount = selectors.getBaseAmount(state);\r\n    const currencyPair = selectors.getCurrencyPair(state);\r\n    const exchangeRate = ratesSelectors.getRate(state, currencyPair);\r\n    const newAmount = Number(\r\n      math.round(math.multiply(baseAmount, exchangeRate), 2)\r\n    );\r\n    dispatch(setContraAmount(newAmount));\r\n  } else {\r\n    const contraAmount = selectors.getContraAmount(state);\r\n    const currencyPair = selectors.getCurrencyPair(state);\r\n    const exchangeRate = ratesSelectors.getRate(state, currencyPair);\r\n    if (exchangeRate === 0) {\r\n      dispatch(setBaseAmount(0));\r\n      return;\r\n    }\r\n    const newAmount = Number(\r\n      math.round(math.divide(contraAmount, exchangeRate), 2)\r\n    );\r\n    dispatch(setBaseAmount(newAmount));\r\n  }\r\n};\r\n\r\nexport const onBaseAmountChange = (newBaseAmount: number) => (\r\n  dispatch: any\r\n) => {\r\n  dispatch(setBaseFixed());\r\n  dispatch(setBaseAmount(newBaseAmount));\r\n  dispatch(recalculateNonFixedAmount());\r\n};\r\n\r\nexport const onContraAmountChange = (newContraAmount: number) => (\r\n  dispatch: any\r\n) => {\r\n  dispatch(setContraFixed());\r\n  dispatch(setContraAmount(newContraAmount));\r\n  dispatch(recalculateNonFixedAmount());\r\n};\r\n\r\nconst setBaseAmount = (amount: number) => ({\r\n  type: ExchangeActionTypes.SET_BASE_AMOUNT,\r\n  amount\r\n});\r\n\r\nconst setContraAmount = (amount: number) => ({\r\n  type: ExchangeActionTypes.SET_CONTRA_AMOUNT,\r\n  amount\r\n});\r\n\r\nexport const setBaseFixed = () => ({\r\n  type: ExchangeActionTypes.SET_BASE_FIXED\r\n});\r\n\r\nexport const setContraFixed = () => ({\r\n  type: ExchangeActionTypes.SET_CONTRA_FIXED\r\n});\r\n\r\nexport const showConfirmation = (baseAmount: number, contraAmount: number) => ({\r\n  type: ExchangeActionTypes.SHOW_CONFIRMATION,\r\n  baseAmount,\r\n  contraAmount\r\n});\r\n\r\nexport const hideConfirmation = () => ({\r\n  type: ExchangeActionTypes.HIDE_CONFIRMATION\r\n});\r\n\r\nexport const onSwitchCurrencies = () => (dispatch: any, getState: any) => {\r\n  const state = getState();\r\n  const isBaseFixed = selectors.isBaseFixed(state);\r\n  const baseCurrency = selectors.getBaseCurrency(state);\r\n  const contraCurrency = selectors.getContraCurrency(state);\r\n  const reverseCurrencyPair = `${contraCurrency}${baseCurrency}`;\r\n  dispatch(changeCurrencyPair(reverseCurrencyPair));\r\n  if (isBaseFixed) {\r\n    const newContraAmount = selectors.getBaseAmount(state);\r\n    dispatch(onContraAmountChange(newContraAmount));\r\n  } else {\r\n    const newBaseAmount = selectors.getContraAmount(state);\r\n    dispatch(onBaseAmountChange(newBaseAmount));\r\n  }\r\n};\r\n\r\nexport const onExchangeButtonPress = () => (dispatch: any, getState: any) => {\r\n  const state = getState();\r\n  const isExchangeEnabled = selectors.isExchangeEnabled(state);\r\n\r\n  if (!isExchangeEnabled) {\r\n    return;\r\n  }\r\n\r\n  const baseAmount = selectors.getBaseAmount(state);\r\n  const baseCurrency = selectors.getBaseCurrency(state);\r\n  const contraAmount = selectors.getContraAmount(state);\r\n  const contraCurrency = selectors.getContraCurrency(state);\r\n\r\n  const newBaseAccountBalance = Number(\r\n    math.round(\r\n      math.subtract(\r\n        accountBalancesSelectors.getBalance(state, baseCurrency),\r\n        baseAmount\r\n      ) as number,\r\n      2\r\n    )\r\n  );\r\n  const newContraAccountBalance = Number(\r\n    math.round(\r\n      math.add(\r\n        accountBalancesSelectors.getBalance(state, contraCurrency),\r\n        contraAmount\r\n      ) as number,\r\n      2\r\n    )\r\n  );\r\n\r\n  dispatch(showConfirmation(baseAmount, contraAmount));\r\n\r\n  dispatch(\r\n    accountBalancesActions.setAccountBalanceForCurrency(\r\n      baseCurrency,\r\n      newBaseAccountBalance\r\n    )\r\n  );\r\n\r\n  dispatch(\r\n    accountBalancesActions.setAccountBalanceForCurrency(\r\n      contraCurrency,\r\n      newContraAccountBalance\r\n    )\r\n  );\r\n  dispatch(setBaseAmount(0));\r\n  dispatch(setContraAmount(0));\r\n};\r\n","const formatAmount = (balance: number) => {\r\n  return balance.toLocaleString('en-US', { minimumFractionDigits: 2 });\r\n};\r\n\r\nexport default formatAmount;\r\n","import * as React from 'react';\r\nimport formatAmount from '../formatAmount';\r\nimport styled from 'styled-components';\r\n\r\nexport interface BalanceProps {\r\n  onClick: () => void;\r\n  symbol: string;\r\n  shouldHighlight: boolean;\r\n  balance: number;\r\n}\r\n\r\nconst span: any = styled.span;\r\n\r\nconst BalanceContainer = span`\r\n  cursor: pointer;\r\n  color: ${(props: any) => (props.shouldHighlight ? 'red' : 'black')};\r\n`;\r\n\r\nfunction Balance(props: BalanceProps) {\r\n  const { shouldHighlight, symbol, balance, onClick } = props;\r\n  return (\r\n    <BalanceContainer\r\n      shouldHighlight={shouldHighlight}\r\n      data-testid=\"balance\"\r\n      onClick={onClick}\r\n    >\r\n      Balance: {symbol}\r\n      {formatAmount(balance)}\r\n    </BalanceContainer>\r\n  );\r\n}\r\n\r\nexport default Balance;\r\n","import * as React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Input } from 'reactstrap';\r\nimport MaskedInput from 'react-text-mask';\r\nimport createNumberMask from 'text-mask-addons/dist/createNumberMask';\r\n\r\nexport interface AmountInputProps {\r\n  value: number;\r\n  onChange: (value: number) => void;\r\n  onFocus: () => void;\r\n}\r\n\r\nconst defaultMaskOptions = {\r\n  prefix: '',\r\n  suffix: '',\r\n  includeThousandsSeparator: true,\r\n  thousandsSeparatorSymbol: ',',\r\n  allowDecimal: true,\r\n  decimalSymbol: '.',\r\n  decimalLimit: 2,\r\n  integerLimit: 7,\r\n  allowNegative: false,\r\n  allowLeadingZeroes: false\r\n};\r\n\r\nconst createAmountInputMask = (maskOptions: any) => {\r\n  const decimalsRegex = /\\.([0-9]{1,2})/;\r\n  const numberMask = createNumberMask({\r\n    includeThousandsSeparator: true,\r\n    allowDecimal: true,\r\n    requireDecimal: true,\r\n    allowLeadingZeroes: false,\r\n    ...maskOptions\r\n  });\r\n\r\n  return (rawValue: any) => {\r\n    const mask = numberMask(rawValue);\r\n    const result = decimalsRegex.exec(rawValue);\r\n\r\n    if (result && result[1].length < 2) {\r\n      mask.push('0');\r\n    } else if (!result) {\r\n      mask.push('0');\r\n      mask.push('0');\r\n    }\r\n\r\n    return mask;\r\n  };\r\n};\r\n\r\nconst AmountInput = (props: AmountInputProps) => {\r\n  const currencyMask = createAmountInputMask({\r\n    ...defaultMaskOptions\r\n  });\r\n\r\n  return (\r\n    <MaskedInput\r\n      mask={currencyMask}\r\n      {...props}\r\n      onChange={e => {\r\n        const newValue = Number(\r\n          e.target.value.replace(/,/g, '').replace(/_/g, '')\r\n        );\r\n        if (!isNaN(newValue)) {\r\n          props.onChange(newValue);\r\n        }\r\n      }}\r\n      render={(ref, renderProps) => (\r\n        <Input data-testid=\"amount-input\" innerRef={ref} {...renderProps} />\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nconst StyledAmountInput = styled(AmountInput)`\r\n  text-align: right;\r\n`;\r\n\r\nexport default StyledAmountInput;\r\n","import * as React from 'react';\r\nimport {\r\n  Dropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem\r\n} from 'reactstrap';\r\nimport styled from 'styled-components';\r\n\r\nexport interface CurrencySelectorProps {\r\n  value: string;\r\n  options: string[];\r\n  onChange: (value: string) => void;\r\n}\r\n\r\nconst StyledDropdownToggle = styled(DropdownToggle)`\r\n  width: 70px;\r\n`;\r\n\r\nfunction CurrencySelector(props: CurrencySelectorProps) {\r\n  const { options, value, onChange } = props;\r\n\r\n  const [dropdownOpen, setDropdownOpen] = React.useState(false);\r\n\r\n  const toggle = () => setDropdownOpen(prevState => !prevState);\r\n\r\n  return (\r\n    <Dropdown\r\n      isOpen={dropdownOpen}\r\n      toggle={toggle}\r\n      data-testid=\"currency-selector\"\r\n    >\r\n      <StyledDropdownToggle caret color=\"primary\">\r\n        {value}\r\n      </StyledDropdownToggle>\r\n      <DropdownMenu>\r\n        <DropdownItem header>Choose Source</DropdownItem>\r\n        {options.map((option, index) => (\r\n          <DropdownItem key={index} onClick={() => onChange(option)}>\r\n            {option}\r\n          </DropdownItem>\r\n        ))}\r\n      </DropdownMenu>\r\n    </Dropdown>\r\n  );\r\n}\r\n\r\nexport default CurrencySelector;\r\n","import * as React from 'react';\r\nimport Balance from './balance';\r\nimport AmountInput from './amountInput';\r\nimport CurrencySelector from './currencySelector';\r\nimport { Row, Col } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon } from 'reactstrap';\r\nimport styled from 'styled-components';\r\n\r\nexport interface ExchangePanelProps {\r\n  currencies: string[];\r\n  amount: number;\r\n  selectedCurrency: string;\r\n  shouldHighlightBalance?: boolean;\r\n  symbol: string;\r\n  balance: number;\r\n  onAmountChange: (value: number) => void;\r\n  onAmountFocus: () => void;\r\n  onCurrencySelected: (currencyName: string) => void;\r\n  onBalanceClick: () => void;\r\n}\r\n\r\nconst PanelContainer = styled.div`\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nfunction ExchangePanel(props: ExchangePanelProps) {\r\n  const {\r\n    amount,\r\n    selectedCurrency,\r\n    shouldHighlightBalance = false,\r\n    symbol,\r\n    balance,\r\n    currencies,\r\n    onAmountChange,\r\n    onAmountFocus,\r\n    onCurrencySelected,\r\n    onBalanceClick\r\n  } = props;\r\n\r\n  return (\r\n    <PanelContainer>\r\n      <Row>\r\n        <Col>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <CurrencySelector\r\n                value={selectedCurrency}\r\n                options={currencies}\r\n                onChange={onCurrencySelected}\r\n              />\r\n            </InputGroupAddon>\r\n            <AmountInput\r\n              value={amount}\r\n              onChange={onAmountChange}\r\n              onFocus={onAmountFocus}\r\n            />\r\n          </InputGroup>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Balance\r\n        onClick={onBalanceClick}\r\n        shouldHighlight={shouldHighlightBalance}\r\n        balance={balance}\r\n        symbol={symbol}\r\n      />\r\n    </PanelContainer>\r\n  );\r\n}\r\n\r\nexport default ExchangePanel;\r\n","import * as React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as exchangeSelectors from '../store/exchange/exchangeSelectors';\r\nimport * as exchangeActions from '../store/exchange/exchangeActions';\r\nimport * as accountBalanceSelectors from '../store/accountBalances/accountBalancesSelectors';\r\nimport StoreState from '../store/storeState';\r\nimport ExchangePanel from './exchangePanel';\r\nimport * as currenciesSelectors from '../store/currencies/currenciesSelectors';\r\n\r\nfunction BaseExchangePanel() {\r\n  const currencies = useSelector(currenciesSelectors.getCurrenices);\r\n  const amount = useSelector(exchangeSelectors.getBaseAmount);\r\n\r\n  const selectedCurrency = useSelector(exchangeSelectors.getBaseCurrency);\r\n\r\n  const shouldHighlightBalance = !useSelector(\r\n    exchangeSelectors.isBaseAmountValid\r\n  );\r\n\r\n  const symbol = useSelector(exchangeSelectors.getBaseCurrencySymbol);\r\n\r\n  const balance = useSelector((state: StoreState) =>\r\n    accountBalanceSelectors.getBalance(state, selectedCurrency)\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const panelProps = {\r\n    currencies,\r\n    amount,\r\n    selectedCurrency,\r\n    shouldHighlightBalance,\r\n    symbol,\r\n    balance,\r\n    onAmountChange: (value: number) =>\r\n      dispatch(exchangeActions.onBaseAmountChange(value)),\r\n    onAmountFocus: () => dispatch(exchangeActions.setBaseFixed()),\r\n    onCurrencySelected: (currency: string) =>\r\n      dispatch(exchangeActions.onBaseCurrencyChange(currency)),\r\n    onBalanceClick: () => dispatch(exchangeActions.onBaseAmountChange(balance))\r\n  };\r\n\r\n  return <ExchangePanel {...panelProps} />;\r\n}\r\n\r\nexport default BaseExchangePanel;\r\n","import * as React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as exchangeSelectors from '../store/exchange/exchangeSelectors';\r\nimport * as accountBalanceSelectors from '../store/accountBalances/accountBalancesSelectors';\r\nimport StoreState from '../store/storeState';\r\nimport ExchangePanel from './exchangePanel';\r\nimport * as exchangeActions from '../store/exchange/exchangeActions';\r\nimport * as currenciesSelectors from '../store/currencies/currenciesSelectors';\r\n\r\nfunction ContraExchangePanel() {\r\n  const currencies = useSelector(currenciesSelectors.getCurrenices);\r\n  const amount = useSelector(exchangeSelectors.getContraAmount);\r\n\r\n  const selectedCurrency = useSelector(exchangeSelectors.getContraCurrency);\r\n\r\n  const symbol = useSelector(exchangeSelectors.getContraCurrencySymbol);\r\n\r\n  const balance = useSelector((state: StoreState) =>\r\n    accountBalanceSelectors.getBalance(state, selectedCurrency)\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const panelProps = {\r\n    currencies,\r\n    amount,\r\n    selectedCurrency,\r\n    symbol,\r\n    balance,\r\n    onAmountChange: (value: number) =>\r\n      dispatch(exchangeActions.onContraAmountChange(value)),\r\n    onAmountFocus: () => dispatch(exchangeActions.setContraFixed()),\r\n    onCurrencySelected: (currency: string) =>\r\n      dispatch(exchangeActions.onContraCurrencyChange(currency)),\r\n    onBalanceClick: () =>\r\n      dispatch(exchangeActions.onContraAmountChange(balance))\r\n  };\r\n\r\n  return <ExchangePanel {...panelProps} />;\r\n}\r\n\r\nexport default ContraExchangePanel;\r\n","import * as React from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as exchangeSelectors from '../store/exchange/exchangeSelectors';\r\nimport * as exchangeActions from '../store/exchange/exchangeActions';\r\n\r\nfunction ExchangeButton() {\r\n  const dispatch = useDispatch();\r\n  const onClick = () => dispatch(exchangeActions.onExchangeButtonPress());\r\n\r\n  const disabled = !useSelector(exchangeSelectors.isExchangeEnabled);\r\n\r\n  return (\r\n    <Button\r\n      color=\"primary\"\r\n      block\r\n      onClick={onClick}\r\n      disabled={disabled}\r\n      data-testid=\"exchange-button\"\r\n    >\r\n      Exchange\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport default ExchangeButton;\r\n","import * as React from 'react';\r\nimport SwitchCurrencies from './switchCurrencies';\r\nimport ExchangeRate from './exchangeRate';\r\nimport BaseExchangePanel from './baseExchangePanel';\r\nimport ContraExchangePanel from './contraExchangePanel';\r\nimport ExchangeButton from './exchangeButton';\r\nimport * as exchangeActions from '../store/exchange/exchangeActions';\r\nimport styled from 'styled-components';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst SwitchAndRateContainer = styled.div`\r\n  height: 30px;\r\n  position: relative;\r\n  padding: 2px;\r\n  margin-bottom: 30px;\r\n  margin-left: 15px;\r\n  margin-right: 15px;\r\n  display: flex;\r\n`;\r\n\r\nfunction ExchangeForm() {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <>\r\n      <BaseExchangePanel />\r\n      <SwitchAndRateContainer>\r\n        <SwitchCurrencies\r\n          onClick={() => dispatch(exchangeActions.onSwitchCurrencies())}\r\n        />\r\n\r\n        <ExchangeRate />\r\n      </SwitchAndRateContainer>\r\n      <ContraExchangePanel />\r\n      <ExchangeButton />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ExchangeForm;\r\n","import * as React from 'react';\r\nimport * as exchangeActions from '../store/exchange/exchangeActions';\r\nimport { Button } from 'reactstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as exchangeSelectors from '../store/exchange/exchangeSelectors';\r\nimport formatAmount from '../formatAmount';\r\nimport styled from 'styled-components';\r\n\r\nconst ConfirmationContent = styled.div`\r\n  height: 244px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n`;\r\nconst ConfirmationText = styled.div``;\r\nconst ConfirmationIcon = styled.div`\r\n  width: 50px;\r\n`;\r\n\r\nfunction ExchangeForm() {\r\n  const dispatch = useDispatch();\r\n\r\n  const onClick = () => dispatch(exchangeActions.hideConfirmation());\r\n\r\n  const baseSymbol = useSelector(exchangeSelectors.getBaseCurrencySymbol);\r\n  const contraSymbol = useSelector(exchangeSelectors.getContraCurrencySymbol);\r\n  const baseAmount = formatAmount(\r\n    useSelector(exchangeSelectors.getConfirmationBaseAmount)\r\n  );\r\n  const contraAmount = formatAmount(\r\n    useSelector(exchangeSelectors.getConfirmationContraAmount)\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <ConfirmationContent>\r\n        <ConfirmationIcon>\r\n          <i className=\"material-icons\" style={{ fontSize: '50px' }}>\r\n            check_circle\r\n          </i>\r\n        </ConfirmationIcon>\r\n        <ConfirmationText data-testid=\"confirmation-text\">\r\n          {`You exchanged ${baseSymbol}${baseAmount} to ${contraSymbol}${contraAmount}`}\r\n        </ConfirmationText>\r\n      </ConfirmationContent>\r\n      <Button color=\"primary\" block onClick={onClick} data-testid=\"done-button\">\r\n        Done\r\n      </Button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ExchangeForm;\r\n","import * as React from 'react';\r\nimport ExchangeForm from './exchangeForm';\r\nimport ExchangeConfirmation from './exchangeConfirmation';\r\nimport { Container } from 'reactstrap';\r\nimport { useSelector } from 'react-redux';\r\nimport * as exchangeSelectors from '../store/exchange/exchangeSelectors';\r\nimport styled from 'styled-components';\r\n\r\nconst PaddedContainer = styled.div`\r\n  margin: auto;\r\n  max-width: 500px;\r\n`;\r\n\r\nfunction Exchange() {\r\n  const shouldShowConfirmation = useSelector(\r\n    exchangeSelectors.shouldShowConfirmation\r\n  );\r\n\r\n  return (\r\n    <PaddedContainer>\r\n      <Container fluid=\"sm\">\r\n        <h3>Exchange</h3>\r\n        {shouldShowConfirmation ? <ExchangeConfirmation /> : <ExchangeForm />}\r\n      </Container>\r\n    </PaddedContainer>\r\n  );\r\n}\r\n\r\nexport default Exchange;\r\n","import { ExchangeActionTypes } from './exchangeActions';\r\n\r\nexport interface ExchangeState {\r\n  currencyPair?: string;\r\n  baseAmount: number;\r\n  contraAmount: number;\r\n  isBaseFixed: boolean;\r\n  shouldShowConfirmation?: boolean;\r\n  confirmationBaseAmount?: number;\r\n  confirmationContraAmount?: number;\r\n}\r\n\r\nconst initialState = {\r\n  baseAmount: 0,\r\n  contraAmount: 0,\r\n  isBaseFixed: true\r\n};\r\n\r\nconst exchangeReducer = (state: ExchangeState = initialState, action: any) => {\r\n  switch (action.type) {\r\n    case ExchangeActionTypes.SET_CURRENCY_PAIR:\r\n      return {\r\n        ...state,\r\n        currencyPair: action.currencyPair\r\n      };\r\n    case ExchangeActionTypes.SET_BASE_AMOUNT: {\r\n      return {\r\n        ...state,\r\n        baseAmount: action.amount\r\n      };\r\n    }\r\n    case ExchangeActionTypes.SET_CONTRA_AMOUNT: {\r\n      return {\r\n        ...state,\r\n        contraAmount: action.amount\r\n      };\r\n    }\r\n    case ExchangeActionTypes.SET_BASE_FIXED: {\r\n      return {\r\n        ...state,\r\n        isBaseFixed: true\r\n      };\r\n    }\r\n    case ExchangeActionTypes.SET_CONTRA_FIXED: {\r\n      return {\r\n        ...state,\r\n        isBaseFixed: false\r\n      };\r\n    }\r\n    case ExchangeActionTypes.SHOW_CONFIRMATION: {\r\n      return {\r\n        ...state,\r\n        shouldShowConfirmation: true,\r\n        confirmationBaseAmount: action.baseAmount,\r\n        confirmationContraAmount: action.contraAmount\r\n      };\r\n    }\r\n    case ExchangeActionTypes.HIDE_CONFIRMATION: {\r\n      return {\r\n        ...state,\r\n        shouldShowConfirmation: false,\r\n        confirmationBaseAmount: null,\r\n        confirmationContraAmount: null\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default exchangeReducer;\r\n","import { RatesActionTypes, RatesAction } from './ratesActions';\r\n\r\nexport interface RatesState {\r\n  [rate: string]: number;\r\n}\r\n\r\nconst ratesReducer = (state: RatesState = {}, action: RatesAction) => {\r\n  if (action.type === RatesActionTypes.SET_RATES) {\r\n    return {\r\n      ...state,\r\n      ...action.rates\r\n    };\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nexport default ratesReducer;\r\n","import { AccountBalanceActionTypes } from './accountBalancesActions';\r\n\r\nexport interface AccountBalancesState {\r\n  [currency: string]: number;\r\n}\r\n\r\nconst accountBalancesReducer = (\r\n  state: AccountBalancesState = {},\r\n  action: any\r\n) => {\r\n  if (action.type === AccountBalanceActionTypes.SET_ACCOUNT_BALANCE) {\r\n    return {\r\n      ...state,\r\n      [action.currency]: action.balance\r\n    };\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nexport default accountBalancesReducer;\r\n","export interface CurrenciesState {\r\n  [currencyName: string]: { symbol: string };\r\n}\r\n\r\nconst currenciesReducer = (state: CurrenciesState = {}, action: any) => {\r\n  return state;\r\n};\r\n\r\nexport default currenciesReducer;\r\n","import { combineReducers } from 'redux';\r\nimport exchangeReducer from './exchange/exchangeReducer';\r\nimport ratesReducer from './rates/ratesReducer';\r\nimport accountBalancesReducer from './accountBalances/accountBalancesReducer';\r\nimport currenciesReducer from './currencies/currenciesReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  exchange: exchangeReducer,\r\n  rates: ratesReducer,\r\n  accountBalances: accountBalancesReducer,\r\n  currencies: currenciesReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import { applyMiddleware, compose, createStore } from 'redux';\r\nimport rootReducer from './rootReducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst configureStore = (preloadedState = {}) => {\r\n  const middlewares: any[] = [thunk];\r\n\r\n  const store = createStore(\r\n    rootReducer,\r\n    preloadedState,\r\n    compose(\r\n      applyMiddleware(...middlewares),\r\n      (window as any).devToolsExtension\r\n        ? (window as any).devToolsExtension()\r\n        : (value: any) => value\r\n    )\r\n  );\r\n\r\n  return store;\r\n};\r\n\r\nexport default configureStore;\r\n","import React from 'react';\r\nimport Exchange from './components/exchange';\r\nimport { Provider } from 'react-redux';\r\nimport configureStore from './store/configureStore';\r\nimport * as exchangeActions from './store/exchange/exchangeActions';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'material-design-icons/iconfont/material-icons.css';\r\n\r\n// mock app setup to populate currencies and account balances\r\n\r\nconst currencies = {\r\n  USD: {\r\n    symbol: '$'\r\n  },\r\n  GBP: {\r\n    symbol: '£'\r\n  },\r\n  EUR: {\r\n    symbol: '€'\r\n  }\r\n};\r\n\r\nconst accountBalances = {\r\n  USD: 1000,\r\n  EUR: 1000,\r\n  GBP: 1000\r\n};\r\n\r\nconst store = configureStore({\r\n  currencies,\r\n  accountBalances\r\n});\r\n\r\nconst currencyPair = 'USDEUR';\r\nstore.dispatch(exchangeActions.changeCurrencyPair(currencyPair));\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"App\">\r\n        <Exchange />\r\n      </div>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}